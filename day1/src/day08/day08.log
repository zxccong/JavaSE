1.代码块的概述
    概述
        用{}括起来的代码称为代码块
    代码块的分类
        根据位置和声明不同，分为，局部代码块，构造代码块，静态代码块，同步代码块
    常见的应用
        局部代码块
            方法中出现，限定变量周期，及时释放，提高内存利用率
        构造代码块
            在类中方法外出现，多个构造方法中相同的代码存放在一起，每次调用构造都执行，并且在构造方法执行之前执行
        静态代码块
            在类中方法外出现，加上static修饰】
            在类中方法外出现，并加上static 修饰，用于给类进行初始化，在加载的时候就执行，并且只能执行一次
            一般用于加载驱动
    Demo1_Code.java
2.代码块面试题
    判断哪个代码块先运行
        Demo2_Student静态代码块
        main方法
        Student 静态代码块
        Studnet 构造代码块
        Studnet 构造函数
        Studnet 构造方法
3.extends继承
    Demo1_Extend.java
4.好处和弊端
    好处：
        提高代码复用性
        提高可维护性
        让类之间产生关系，是多态的前提
    弊端
        类的耦合性增强了

    开发的原则：高类聚，低耦合
    耦合：类与类之间的关系
    内聚，就是自己完成某件事
5.特点
    只支持单继承不支持多继承
    支持多层继承
    解析：多继承是有安全隐患的，如果有多个继承的类中是实现了相同的方法嗲用的时候不知道调用哪一个
    特点
        子类可以使用父类的方法父类不能使用子类的方法

6.什么时候使用继承
    注意事项
        子类只能继承非私有成员（方法和变量）
        子类不能继承父类的构造方法，但可以通过super 关键字去访问父类的构造方法
        不要为了部分功能去继承
            举例：
            项目经理 姓名 工号 工资 奖金
            程序员   姓名 工号 工资
            应该都继承员工，不应该继承程序员
            体现 is a 关系
7.继承中变量的关系
    同名变量
        子类有就不用父类的，开发中不会出现这种情况
        子类就是继承父类的为了使用父类的成员，如果定义了同名变量就没有意义
    不同名对象
8.this和super
    调用成员变量
        this代表当前对象的引用，谁来调用我，我就代表谁
        super代表当前父类的成员变量
    调用构造方法
        this()调用本类的构造方法
        super(）调用父类的构造方法
    调用成员方法
        this调用本类的方法，也可以调用父类的方法
        super调用父类的成员方法
    this既可以调用本类的也可以调用父类的，super 调用父类的
9.继承中构造方法的关系
    子类的所有构造方法都会访问父类的空参的构造方法
    解析：
        因为子类会就继承父类中的数据，还可能使用父类的数据
        所以子类初始化前，一定会先完成父类数据的初始化
        每一个构造方法，第一条语句默认都是super();
10构造方法的注意事项
    如果父类没有无参的构造方法，有有参的构造方法，会报错
    super(变量，变量)，直接调用父类的有参构造
    如果没有无参的只能，手动访问有参的父类构造方法
    this.调用必须放在构造器的第一条语句
    super.调用必须放在构造器的第一条语句
    子类必须调用父类
11.继承中面试题
    1.Test_Extends.java
    2.继承代码块的执行顺序
        fu静态代码块
        zi静态代码块
        fu构造代码块
        fu构造方法
        zi构造代码块
        zi构造方法
12.继承中的成员方法关系（可以结合7.）得出继承中变量和方法的关系
    同名方法
        子类有就不用父类的（相当于重写），但可以用super调用父类的方法
    不同名方法
        直接调用就可以
13.重写的概述
    什么是重写
        子父类出现了一模一样的方法（返回值类型可以是子父类，这个学完面向对象讲）
        Demo3_Overide.java
    重写的应用
        当子类需要父类的功能，而功能内有自己特有的内容，在重写父类中的方法
14.方法重写的注意事项
    1.父类中有私有的方法不能重写
    2.子类重写父类的时候权限不能更低比如父类是public 子类就不能是（什么都不加的product）或者其他更加低权限的修饰符
    3.父类是静态方法，子类必须也是静态方法才能进行重写（如果子类的不是静态的，不能明确调用哪一个）
        其实算不上重写
15.overrider（重写）和overload（重载）的区别
    返回值类型
        overload（重载），在本类中出现方法名相同，参数列表不同的方法，与返回值无关
        overrider（重写），子类中出现和父类声明一样的方法，与返回值有关， 返回值需要一模一样（或者是子父类）
    子类调用方法时候
        先找子类本身，再找父类
16.学生、老师类继承Peason类，猫狗类继承Animal类
17.final概念
    概念
        最终的
    特点
        修饰类，类不能继承
        修饰变量，变量变成常量，只能赋值一次
        修饰方法，方法不能被重写
    拓展
        String类也是final
    命名规范
        全大写，字母之间用_
18final局部变量
    final 修饰基本数据类型，值不能改变
          修饰引用数据类型，地址不能改变，对象的属性可以改变
    方法声明传入参数修饰，不影响，不常用
19.初始化时机
    final int num;
    报错

    修饰变量的初始化时机
        显示初始化（定义时候赋值）
        在对象构造完毕前即可（在构造函数初始化）
