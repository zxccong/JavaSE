1.集合框架(Map集合概述和特点)
  * A:Map接口概述
  	* 查看API可以知道：
  		* 将键映射到值的对象
  		* 一个映射不能包含重复的键
  		* 每个键最多只能映射到一个值
  * B:Map接口和Collection接口的不同
  	* Map是双列的,Collection是单列的
  	* Map的键唯一,Collection的子体系Set是唯一的
  	* Map集合的数据结构值针对键有效，跟值无关;Collection集合的数据结构是针对元素有效
    public boolean add(E e) {
            return map.put(e, PRESENT)==null;
        }
        通过源码看到set的add依赖的是 map的put
        可以公用一套hash的算法
2.集合框架(Map集合的功能概述)
  * A:Map集合的功能概述
  	* a:添加功能
  		* V put(K key,V value):添加元素。（返回的被覆盖的值！！）
  			* 如果键是第一次存储，就直接存储元素，返回null
  			* 如果键不是第一次存在，就用值把以前的值替换掉，返回以前的值
  	* b:删除功能
  		* void clear():移除所有的键值对元素
  		* V remove(Object key)：根据键删除键值对元素，并把值返回
  	* c:判断功能
  		* boolean containsKey(Object key)：判断集合是否包含指定的键
  		* boolean containsValue(Object value):判断集合是否包含指定的值
  		* boolean isEmpty()：判断集合是否为空
  	* d:获取功能
  		* Set<Map.Entry<K,V>> entrySet():
  		* V get(Object key):根据键获取值
  		* Set<K> keySet():获取集合中所有键的集合
  		* Collection<V> values():获取集合中所有值的集合（返回 所有的值）
  	* e:长度功能
  		* int size()：返回集合中的键值对的个数（添加多小个，就返回多小个）
3.集合框架(Map集合的遍历之键找值) （Map的迭代1.getSet()2.entrySet(Map.Entry是什么？)）
  * A:键找值思路：
  	* 获取所有键的集合
  	* 遍历键的集合，获取到每一个键
  	* 根据键找值
  * B:案例演示
  	* Map集合的遍历之键找值

  			HashMap<String, Integer> hm = new HashMap<>();
  			hm.put("张三", 23);
  			hm.put("李四", 24);
  			hm.put("王五", 25);
  			hm.put("赵六", 26);

  			/*Set<String> keySet = hm.keySet();			//获取集合中所有的键
  			Iterator<String> it = keySet.iterator();	//获取迭代器
  			while(it.hasNext()) {						//判断单列集合中是否有元素
  				String key = it.next();					//获取集合中的每一个元素,其实就是双列集合中的键
  				Integer value = hm.get(key);			//根据键获取值
  				System.out.println(key + "=" + value);	//打印键值对
  			}*/

  			for(String key : hm.keySet()) {				//增强for循环迭代双列集合第一种方式
  				System.out.println(key + "=" + hm.get(key));
  			}

4.集合框架(Map集合的遍历之键值对对象找键和值)
  * A:键值对对象找键和值思路：
  	* 获取所有键值对对象的集合
  	* 遍历键值对对象的集合，获取到每一个键值对对象
  	* 根据键值对对象找键和值
  * B:案例演示
  	* Map集合的遍历之键值对对象找键和值

  			HashMap<String, Integer> hm = new HashMap<>();
  			hm.put("张三", 23);
  			hm.put("李四", 24);
  			hm.put("王五", 25);
  			hm.put("赵六", 26);
  			/*Set<Map.Entry<String, Integer>> entrySet = hm.entrySet();	//获取所有的键值对象的集合
  			Iterator<Entry<String, Integer>> it = entrySet.iterator();//获取迭代器
  			while(it.hasNext()) {
  				Entry<String, Integer> en = it.next();				//获取键值对对象
  				String key = en.getKey();								//根据键值对对象获取键
  				Integer value = en.getValue();							//根据键值对对象获取值
  				System.out.println(key + "=" + value);
  			}*/

  			for(Entry<String,Integer> en : hm.entrySet()) {
  				System.out.println(en.getKey() + "=" + en.getValue());
  			}
5.集合框架(HashMap集合键是Student值是String的案例)
  * A:案例演示
  	* HashMap集合键是Student值是String的案例
  	toString 源码分析
  	public String toString() {
            Iterator<Entry<K,V>> i = entrySet().iterator();
            if (! i.hasNext())
                return "{}";

            StringBuilder sb = new StringBuilder();
            sb.append('{');
            for (;;) {
                Entry<K,V> e = i.next();
                K key = e.getKey();
                V value = e.getValue();
                sb.append(key   == this ? "(this Map)" : key);
                sb.append('=');
                sb.append(value == this ? "(this Map)" : value);
                if (! i.hasNext())
                    return sb.append('}').toString();
                sb.append(',').append(' ');
            }
        }

6.集合框架(LinkedHashMap的概述和使用)
  * A:案例演示
  	* LinkedHashMap的特点
  		* 底层是链表实现的可以保证怎么存就怎么取

7.集合框架(TreeMap集合键是Student值是String的案例)
  * A:案例演示
  	* TreeMap集合键是Student值是String的案例
8.集合框架(统计字符串中每个字符出现的次数)
  * A:案例演示
  	* 需求：统计字符串中每个字符出现的次数
  			String str = "aaaabbbcccccccccc";
  			char[] arr = str.toCharArray();						//将字符串转换成字符数组
  			HashMap<Character, Integer> hm = new HashMap<>();	//创建双列集合存储键和值

  			for(char c : arr) {									//遍历字符数组
  				/*if(!hm.containsKey(c)) {						//如果不包含这个键
  					hm.put(c, 1);								//就将键和值为1添加
  				}else {											//如果包含这个键
  					hm.put(c, hm.get(c) + 1);					//就将键和值再加1添加进来
  				}

  				//hm.put(c, !hm.containsKey(c) ? 1 : hm.get(c) + 1);
  				Integer i = !hm.containsKey(c) ? hm.put(c, 1) : hm.put(c, hm.get(c) + 1);
  						}

  			for (Character key : hm.keySet()) {					//遍历双列集合
  				System.out.println(key + "=" + hm.get(key));
  			}
9.集合框架(集合嵌套之HashMap嵌套HashMap)
  * A:案例演示
  	* 集合嵌套之HashMap嵌套HashMap
10.集合框架(HashMap和Hashtable的区别)
   * A:面试题
   	* HashMap和Hashtable的区别
   		* Hashtable是JDK1.0版本出现的,是线程安全的,效率低,HashMap是JDK1.2版本出现的,是线程不安全的,效率高
   		* Hashtable不可以存储null键和null值,HashMap可以存储null键和null值
   * B:案例演示
   	* HashMap和Hashtable的区别
11.集合框架(Collections工具类的概述和常见方法讲解)
   * A:Collections类概述
   	* 针对集合操作 的工具类
   * B:Collections成员方法
   *
   		public static <T> void sort(List<T> list)                   //排序
   		public static <T> int binarySearch(List<?> list,T key)      //半分查找
   		public static <T> T max(Collection<?> coll)                 //默认排序后的最大值
   		public static void reverse(List<?> list)                    //反转
   		public static void shuffle(List<?> list)                    //随机置换
12.集合框架(模拟斗地主洗牌和发牌)
   * A:案例演示
   	* 模拟斗地主洗牌和发牌，牌没有排序

   			//买一副扑克
   			String[] num = {"A","2","3","4","5","6","7","8","9","10","J","Q","K"};
   			String[] color = {"方片","梅花","红桃","黑桃"};
   			ArrayList<String> poker = new ArrayList<>();

   			for(String s1 : color) {
   				for(String s2 : num) {
   					poker.add(s1.concat(s2));
   				}
   			}

   			poker.add("小王");
   			poker.add("大王");
   			//洗牌
   			Collections.shuffle(poker);
   			//发牌
   			ArrayList<String> gaojin = new ArrayList<>();
   			ArrayList<String> longwu = new ArrayList<>();
   			ArrayList<String> me = new ArrayList<>();
   			ArrayList<String> dipai = new ArrayList<>();

   			for(int i = 0; i < poker.size(); i++) {
   				if(i >= poker.size() - 3) {
   					dipai.add(poker.get(i));
   				}else if(i % 3 == 0) {
   					gaojin.add(poker.get(i));
   				}else if(i % 3 == 1) {
   					longwu.add(poker.get(i));
   				}else {
   					me.add(poker.get(i));
   				}
   			}

   			//看牌

   			System.out.println(gaojin);
   			System.out.println(longwu);
   			System.out.println(me);
   			System.out.println(dipai);
    排序的话：洗牌洗得是索引，然后获得对应的牌
    添加TreeSet集合，对发放的索引进行排序
13.集合框架(泛型固定下边界)
  * ? super E
  Demo2_Genric
14.15-18总结
