1.多态
    多态的概述
        事物存在的多种形态
    多态的前提
        要有继承关系
        要有方法重写
        要有父类引用指向子类对象Animal a = new Cat();
2.成员变量中
    父类引用子类对象，得到的值的父类的成员变量的值Father f = new Son();
    解释
        编译看左边，运行看左边
3.成员方法中
    父类引用子类对象，调用重写的方法，运行的是子类的函数
    解析
        编译看左边，运行看右边（动态绑定）
    动态绑定在方法区，如果父类中没有重写该方法编译会报错，运行则运行子类的方法
4.多态中成员访问静态成员方法
    父类引用子类对象，调用静态成员方法，运行的是父类的函数
    解析
        编译看左边，运行看左边
        staic是静态的不能够进行动态绑定
5.超人的例子 Peason p = new SuperMan();
    父类Peason 没有fly救人方法
    编译报错
6.多态中的向下转型和向下转型
    基本数据类型，自动类型转换和强制类型转换
    int i = 10;
    byte b =20;
    i=b;    //自动类型提升
    b = (byte)i;    //强制类型转换

    Peason p = new SuperMan();  //向上转型
    SuperMan sm = (SuperMan)p; //向下转型
    sm.fly（）
7.多态的好处和弊端
    好处
        提高的代码的维护性（继承保证）
        提高了代码的扩展性（由多态保证）
        举例
            如果一个方法参数需要一个动物，写一个就不用重新改Cat参数，或者Dog参数，也不用重新写一个类
            创建类时候很少用，但是作为参数的时候经常使用
            如果在该方法中使用向下转型，可能会出现狗不能转换为猫ClassCastException
            可以通过instanceof关键字进行判断
            a instanceof Cat ->该对象是不是Cat类
            判断后就可以进行向下转型
            很小这么调用
    弊端
        不能使用子类的特有属性和行为
8.题目分析
    Test_Polymorphic.java
9.抽象
    抽象的概念
        抽象就是看不懂
    特点
        抽象类和抽象方法必须用abstract关键字修饰
        abstract class 类名{}
        public abstract void eat()
        抽象类不一定有抽象方法，有抽象方法的类一定是抽象类，或者是接口
        抽象类不能实例化，只能通过多态的方式，由具体的子类实例化，也是多态的一种，抽象类多态
        抽象类的子类
            要么是抽象类
            要么重写了抽象了中的所有抽象方法
    Demo_Abstract.java
10.抽象类的成员的特点（成员变量和成员方法）
    成员变量：既可以是变量，也可以是常量，abstract 不能修饰成员变量
    构造方法：有，用于访问父类数据的初始化(如果没有子类，默认调用父类的构造方法)
    成员方法：既可以是抽象的，也可以是非抽象的
    特点：
        抽象方法必须强制子类做的事情
        非抽象方法，子类继承的事情，提高代码复用性
11.葵花宝典？（一个抽象类，有一个抽象方法，不同的子类用不同的方法的运行）
12.抽象动物类的（抽象动物类中的吃东西方法，各种动物吃不同的东西自己实现）
13.抽象老师类（不同的老师，抽象讲课方法，讲课方式自己实现）
14.员工类（有程序员和经理两个职位，经理多一个奖金的成员变量）
15.面试题
    1.抽象类可不可以没有抽象方法，如果可以，有什么意义
        可以目的只有一个，就是不让其他类创建本类的对象，交给子类完成
    2.abstract不能和哪些关键字共存
        static abstract修饰的方法没有方法体，被static修饰，的可以类名.调用，但类名调用方法没有意义（还没有对象实现该方法）
        final abstract修饰方法强制子类重写，final修饰不能让子类重写，所以矛盾
        private abstract修饰是为了让子类看到并强制重写，private修饰不让子类访问，所以他们矛盾
16.接口
    接口的概述
        从狭义的角度讲就是指JAVA中的interface
        从广义的角度讲对外提供规则的都是接口
    接口的特点
        用关键字interface表示
            interface 接口名{}
        类实现接口用implements表示
            class 类名 implements 接口名{}
        接口不能实例化
            那么接口怎么实例化-》按照多态的方式实例化
        接口的子类
            可以是抽象类，但意义不大
            可以是具体的类，要重写接口中的所有抽象方法（推荐使用）
17.接口中的成员
    成员变量：只能是常量，并且是静态的并公共的(默认public abstract final 三个关键字可以互相交换位置)
    构造方法：接口没有构造方法 //一个类如果没有继承默认继承Object
    成员方法：只能是抽象方法 //重写接口的方法一定要的public 因为不能是更低权限的修饰符
                默认修饰符 public abstract final
18.接口关系
    类与类，类与接口，接口与接口关系
        类与类
            继承关系，只能单继承，可以多层继承
        类与接口
            实现关系，可以单实现，也可以多实现
            并且还可以在继承一个类的同时实现多个接口
        接口与接口
            继承关系，也可以单继承，也可以多继承，隔开！！implements不允许多个要用，隔开
19.抽象类和接口的区别
    成员区别
        抽象类
            成员变量：可以变量也可以常量
            构造方法：有
            成员方法：可以抽象，也可以非抽象
        接口：
            成员变量：只可以是常量
            成员方法：只可以是抽象
    关系区别
        类与类
            继承
        类与接口
            实现、单实现，多实现
        接口与接口
            继承、单继承、多继承
    概念区别
        抽象类：被继承体现的是一个“is a”的关系，抽象类中定义得是该继承体系的共性功能
        接口 ： 被实现体现的是 “like a ”的关系，接口中定义的是该继承体系的拓展功能
20.案例分析
    动物类（吃饭睡觉抽象类，跳高接口）
