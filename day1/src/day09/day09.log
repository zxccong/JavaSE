1.多态
    多态的概述
        事物存在的多种形态
    多态的前提
        要有继承关系
        要有方法重写
        要有父类引用指向子类对象Animal a = new Cat();
2.成员变量中
    父类引用子类对象，得到的值的父类的成员变量的值Father f = new Son();
    解释
        编译看左边，运行看左边
3.成员方法中
    父类引用子类对象，调用重写的方法，运行的是子类的函数
    解析
        编译看左边，运行看右边（动态绑定）
    动态绑定在方法区，如果父类中没有重写该方法编译会报错，运行则运行子类的方法
4.多态中成员访问静态成员方法
    父类引用子类对象，调用静态成员方法，运行的是父类的函数
    解析
        编译看左边，运行看左边
        staic是静态的不能够进行动态绑定
5.超人的例子 Peason p = new SuperMan();
    父类Peason 没有fly救人方法
    编译报错
6.多态中的向下转型和向下转型
    基本数据类型，自动类型转换和强制类型转换
    int i = 10;
    byte b =20;
    i=b;    //自动类型提升
    b = (byte)i;    //强制类型转换

    Peason p = new SuperMan();  //向上转型
    SuperMan sm = (SuperMan)p; //向下转型
    sm.fly（）
7.多态的好处和弊端
    好处
        提高的代码的维护性（继承保证）
        提高了代码的扩展性（由多态保证）
        举例
            如果一个方法参数需要一个动物，写一个就不用重新改Cat参数，或者Dog参数，也不用重新写一个类
            创建类时候很少用，但是作为参数的时候经常使用
            如果在该方法中使用向下转型，可能会出现狗不能转换为猫ClassCastException
            可以通过instanceof关键字进行判断
            a instanceof Cat ->该对象是不是Cat类
            判断后就可以进行向下转型
            很小这么调用
    弊端
        不能使用子类的特有属性和行为
8.题目分析
    Test_Polymorphic.java
9.抽象
    抽象的概念
        抽象就是看不懂
    特点
        抽象类和抽象方法必须用abstract关键字修饰
        abstract class 类名{}
        public abstract void eat()
        抽象类不一定有抽象方法，有抽象方法的类一定是抽象类，或者是接口
        抽象类不能实例化，只能通过多态的方式，由具体的子类实例化，也是多态的一种，抽象类多态
        抽象类的子类
            要么是抽象类
            要么重写了抽象了中的所有抽象方法
    Demo_Abstract.java
10.抽象类的成员的特点（成员变量和成员方法）
    成员变量：既可以是变量，也可以是常量，abstract 不能修饰成员变量
    构造方法：有，用于访问父类数据的初始化(如果没有子类，默认调用父类的构造方法)
    成员方法：既可以是抽象的，也可以是非抽象的
    特点：
        抽象方法必须强制子类做的事情
        非抽象方法，子类继承的事情，提高代码复用性



